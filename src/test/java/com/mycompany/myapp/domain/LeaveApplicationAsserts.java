package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LeaveApplicationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveApplicationAllPropertiesEquals(LeaveApplication expected, LeaveApplication actual) {
        assertLeaveApplicationAutoGeneratedPropertiesEquals(expected, actual);
        assertLeaveApplicationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveApplicationAllUpdatablePropertiesEquals(LeaveApplication expected, LeaveApplication actual) {
        assertLeaveApplicationUpdatableFieldsEquals(expected, actual);
        assertLeaveApplicationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveApplicationAutoGeneratedPropertiesEquals(LeaveApplication expected, LeaveApplication actual) {
        assertThat(actual)
            .as("Verify LeaveApplication auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveApplicationUpdatableFieldsEquals(LeaveApplication expected, LeaveApplication actual) {
        assertThat(actual)
            .as("Verify LeaveApplication relevant properties")
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getReason()).as("check reason").isEqualTo(expected.getReason()))
            .satisfies(a -> assertThat(a.getSubmissionDate()).as("check submissionDate").isEqualTo(expected.getSubmissionDate()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getRejectionReason()).as("check rejectionReason").isEqualTo(expected.getRejectionReason()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeaveApplicationUpdatableRelationshipsEquals(LeaveApplication expected, LeaveApplication actual) {
        // empty method
    }
}
